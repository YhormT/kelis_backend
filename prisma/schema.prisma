generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id           Int        @id @default(autoincrement())
  userId       Int        @unique
  mobileNumber String?
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        CartItem[]

  @@map("Cart")
}

model User {
  id               Int           @id @default(autoincrement())
  name             String
  email            String        @unique
  password         String
  role             String
  createdAt        DateTime      @default(now())
  phone            String?
  loanBalance      Float         @default(0) // actual amount of the user
  refundedTotal    Float         @default(0)
  hasLoan          Boolean       @default(false)
  adminLoanBalance Float?        @db.Float
  isLoggedIn       Boolean       @default(false)  // ðŸ‘ˆ NEW FIELD ADDED
  cart             Cart?
  orders           Order[]
  TopUp            TopUp[]
  transactions     Transaction[]

  @@map("User")
}

model CartItem {
  id           Int     @id @default(autoincrement())
  cartId       Int
  quantity     Int     @default(1)
  price        Float
  productId    Int
  mobileNumber String?
  cart         Cart    @relation(fields: [cartId], references: [id])
  product      Product @relation(fields: [productId], references: [id])

  @@index([cartId], map: "CartItem_cartId_fkey")
  @@index([productId], map: "CartItem_productId_fkey")
  @@map("CartItem")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  CartItem    CartItem[]
  OrderItem   OrderItem[]

  @@map("Product")
}

model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  createdAt    DateTime    @default(now())
  status       String      @default("Pending")
  mobileNumber String?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]

  @@index([userId], map: "Order_userId_fkey")
  @@map("Order")
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int
  mobileNumber String?
  status       String  @default("Pending")
  order        Order   @relation(fields: [orderId], references: [id])
  product      Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
  @@map("OrderItem")
}

model TopUp {
  id          Int      @id @default(autoincrement())
  userId      Int
  referenceId String   @unique
  amount      Float
  status      String   @default("Pending")
  submittedBy String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "TopUp_userId_fkey")
  @@map("TopUp")
}

model Upload {
  id         Int        @id @default(autoincrement())
  filename   String     @db.VarChar(255)
  filePath   String?    @db.VarChar(255)
  uploadedAt DateTime?  @db.DateTime(0)
  userId     String?    @db.VarChar(255)
  purchases  Purchase[]

  @@map("Upload")
}

model Purchase {
  id              Int    @id @default(autoincrement())
  phone           String @db.VarChar(20)
  price           String @db.VarChar(100)
  itemDescription String @db.Text
  uploadedFileId  Int
  uploadedFile    Upload @relation(fields: [uploadedFileId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([uploadedFileId], map: "uploaded_file_id")
  @@map("Purchase")
}

model Transaction {
  id             Int       @id @default(autoincrement())
  userId         Int
  amount         Float
  balance        Float
  previousBalance Float    @default(0) // ðŸ‘ˆ ADD THIS FIELD
  type           String    @db.VarChar(191)
  description    String    @db.Text
  reference      String?   @db.VarChar(255)
  createdAt      DateTime? @default(now()) @db.DateTime(3)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_user_transaction")

  @@index([userId], map: "fk_user_transaction")
  @@map("Transaction")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  message   String
  isActive  Boolean  @default(true)
  priority  Int      @default(1) // Higher numbers = higher priority
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   // Admin user ID who created it
  
  @@map("Announcements")
}


model SmsMessage {
  id          Int      @id @default(autoincrement())
  phoneNumber String   @db.VarChar(20)
  message     String   @db.Text
  reference   String?  @db.VarChar(255)
  amount      Float?
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@map("SmsMessage")
}